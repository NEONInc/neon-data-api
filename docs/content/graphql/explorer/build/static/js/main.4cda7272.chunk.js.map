{"version":3,"sources":["env.ts","GraphiQL.js","index.tsx"],"names":["Env","getApiProtocol","protocol","window","location","protocolOverride","process","REACT_APP_NEON_API_HOST_PROTOCOL","length","String","getApiHostName","hostName","host","hostOverride","REACT_APP_NEON_API_HOST","getApiHost","graphQLFetcher","graphQLParams","init","method","headers","body","JSON","stringify","fetch","then","response","json","ReactDOM","render","defaultVariableEditorOpen","fetcher","defaultQuery","variables","document","getElementById"],"mappings":"2NAOMA,EAAkB,CACtBC,eAAgB,WACd,IAAIC,EAAgB,UAAMC,OAAOC,SAASF,UACpCG,EAAuCC,mnBAAYC,iCAIzD,MAHgC,kBAArBF,GAAkCA,EAAiBG,OAAS,IACrEN,EAAWO,OAAOJ,IAEd,GAAN,OAAUH,IAEZQ,eAAgB,WACd,IAAIC,EAAgB,UAAMR,OAAOC,SAASQ,MACpCC,EAAmCP,mnBAAYQ,wBAIrD,MAH4B,kBAAjBD,GAA8BA,EAAaL,OAAS,IAC7DG,EAAWF,OAAOI,IAEd,GAAN,OAAUF,IAEZI,WAAY,WACV,MAAM,GAAN,OAAUf,EAAIC,iBAAd,aAAmCD,EAAIU,oBAI5BV,ICWTgB,EAAiB,SAACC,GACtB,IAAMC,EAAO,CACXC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUN,IAEvB,OAAOO,IAAM,GAAD,OAAIxB,EAAIe,aAAR,YAAgCG,GACzCO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,cC1C/BC,IAASC,OD8CP,cAAC,IAAD,CACEC,2BAAyB,EACzBC,QAASf,EACTgB,aAhDc,0rBAiDdC,UArBkB,+CC7BSC,SAASC,eAAe,W","file":"static/js/main.4cda7272.chunk.js","sourcesContent":["\nexport interface ApiHostEnv {\n  getApiProtocol: () => string;\n  getApiHostName: () => string;\n  getApiHost: () => string;\n};\n\nconst Env: ApiHostEnv = {\n  getApiProtocol: (): string => {\n    let protocol: string = `${window.location.protocol}`;\n    const protocolOverride: string | undefined = process.env.REACT_APP_NEON_API_HOST_PROTOCOL;\n    if (typeof protocolOverride === \"string\" && (protocolOverride.length > 0)) {\n      protocol = String(protocolOverride);\n    }\n    return `${protocol}`;\n  },\n  getApiHostName: (): string => {\n    let hostName: string = `${window.location.host}`;\n    const hostOverride: string | undefined = process.env.REACT_APP_NEON_API_HOST;\n    if (typeof hostOverride === \"string\" && (hostOverride.length > 0)) {\n      hostName = String(hostOverride);\n    }\n    return `${hostName}`;\n  },\n  getApiHost: (): string => {\n    return `${Env.getApiProtocol()}//${Env.getApiHostName()}`;\n  }\n};\n\nexport default Env;\n","import React from \"react\";\nimport GraphiQL from \"graphiql\";\nimport fetch from \"isomorphic-fetch\";\n\nimport Env from \"./env\";\n\nconst defaultQuery = `\n# Type queries into this side of the screen,\n# and you will see intelligent typeaheads aware\n# of the current GraphQL type schema,\n# live syntax, and validation errors highlighted\n# within the text.\n\n# Here's a query for retrieving a single data product\n# as specified by the query variables window below.\nquery Product($productCode: String!) {\n  product (productCode: $productCode) {\n    productCode\n    productName\n    productDescription\n    productScienceTeam\n    productHasExpanded\n    productBasicDescription\n    productExpandedDescription\n    productPublicationFormatType\n    keywords\n    themes\n    siteCodes {\n      siteCode\n      availableMonths\n    }\n  }\n}\n`;\nconst defaultVariables = `\n{\n  \"productCode\": \"DP1.00001.001\"\n}\n`;\n\nconst graphQLFetcher = (graphQLParams) => {\n  const init = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(graphQLParams),\n  };\n  return fetch(`${Env.getApiHost()}/graphql`, init)\n    .then(response => response.json());\n};\n\nexport const getGraphiQL = () => (\n  <GraphiQL\n    defaultVariableEditorOpen\n    fetcher={graphQLFetcher}\n    defaultQuery={defaultQuery}\n    variables={defaultVariables}\n  />\n);\n","import ReactDOM from \"react-dom\";\nimport { getGraphiQL } from \"./GraphiQL\";\nimport \"./App.css\";\nimport \"graphiql/graphiql.css\";\n\nReactDOM.render(getGraphiQL(), document.getElementById(\"root\"));\n"],"sourceRoot":""}